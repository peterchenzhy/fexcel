{"version":3,"sources":["pages/index/Index.jsx","components/RoleHOC/index.jsx"],"names":["open","es_form","url","export","layout","tableName","info","modal","error","changeSelectGroup","success","value","props","getColumnList","wrapperCol","span","loadPage","generalLayout","getFileList","lg","xl","Index_Index","_PureComponent","params","cb","_this","setState","classCallCheck","this","Index","modalVar","flag","possibleConstructorReturn","key","getPrototypeOf","setFieldsValue","call","list","_this$props$form","form","getFieldDecorator","formKey","tempForm","item","tableCollumName","push","fields","actions","id","Set","temp","resetForm","keys","pageNo","arguments","length","undefined","pageSize","validateFields","err","values","state","postData","fileId","condition","forEach","getTableList","selectedRowKeys","selectedRows","clearData","handleDeleteFile","handleShowSizeChange","current","getFieldValue","handleSearch","e","confirm","batchUpdate","window","location","reload","onCancel","showSuccess","isShowModal","msg","title","content","okText","okType","onOk","showError","showInfo","exportFile","fileLoading","concat","formSearch","handleShowModal","Object","defineProperty","handleFieldsBlur","_ref","handleBlur","_ref2","editData","nextProps","route","refreshFileFlag","resetFields","resetState","columnList","operateSuccessFlag","inherits","createClass","operateInfo","operateFailFlag","that","pagination","pageNum","showSizeChanger","showQuickJumper","onChange","_this2","_this$props$form2","_this$props","dataSource","tableList","fileList","loading","role","_this$state","_this$props$pageInfo","pageInfo","total","columnsObj","filter","canView","map","excelCollumName","render","text","record","canEdit","react_default","a","createElement","FormItem","label","initialValue","target","input","placeholder","style","width","handlePageChange","onShowSizeChange","name","beforeUpload","file","showUploadList","customRequest","formData","FormData","WrapComponent","RoleComponent","path","assign","PureComponent","hoistNonReactStatics"],"mappings":"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","file":"static/js/6.1b6feebf.chunk.js","sourcesContent":["/* eslint-disable prefer-destructuring */\r/**\r * Created by charles on 2018/5/30.\r */\rimport React, { PureComponent, Fragment } from 'react';\rimport './Index.less';\rimport { connect } from 'react-redux';\rimport { Button, Col, Form, Row, Select, Layout, Table, Modal, Spin, Input, Upload } from 'antd';\rimport { bindActionCreators } from \"redux\";\rimport actions from \"../../stores/actions/resumeActions\";\rimport url from \"../../services/api\";\rimport RoleHOC from '../../components/RoleHOC'\rimport { Link } from 'react-router';\r\r\rconst FormItem = Form.Item;\rconst Content = Layout.Content;\rconst { info, error, success } = Modal;\rconst formOtherLayout = {\r  labelCol: { span: 10 },\r  wrapperCol: { span: 14 },\r};\rconst generalLayout = { md: 24, lg: 12, xl: 8 };\r\r\rclass Index extends PureComponent {\r  constructor(props) {\r    super(props);\r    this.state = {\r      isShowModal: false,\r      //文件上传loading\r      fileLoading: false,\r      selectedRowKeys: [],\r      selectedRows: [],\r      formSearch: [],\r      // 动态查询项\r      fields: []\r    };\r  }\r\r  componentDidMount() {\r    this.getFileList();\r  }\r\r  componentWillReceiveProps(nextProps) {\r    if (this.props.route.path !== nextProps.route.path && nextProps.route.path !== '') {\r      this.resetForm();\r    }\r    if (this.props.refreshFileFlag !== nextProps.refreshFileFlag && nextProps.refreshFileFlag) {\r      this.getFileList();\r      this.props.actions.resetState();\r    }\r    // 动态查询条件\r    if (this.props.columnList !== nextProps.columnList && nextProps.columnList.length > 0) {\r      this.generateForm(nextProps.columnList);\r    }\r    // 操作提示\r    if (this.props.operateSuccessFlag !== nextProps.operateSuccessFlag && nextProps.operateSuccessFlag === true) {\r      this.showSuccess(nextProps.operateInfo);\r      this.props.actions.resetState();\r    }\r    if (this.props.operateFailFlag !== nextProps.operateFailFlag && nextProps.operateFailFlag === true) {\r      this.showError(nextProps.operateInfo);\r      this.props.actions.resetState();\r    }\r  }\r\r  generateForm = (list) => {\r    const { getFieldDecorator, setFieldsValue } = this.props.form;\r    let temp = [],\r      tempForm = [];\r    list.forEach(item => {\r      if (item.canSearch === 1) {\r        temp.push(item.tableCollumName);\r        tempForm.push(item);\r      }\r    });\r    this.setState({\r      fields: [...new Set(temp)]\r    });\r    setFieldsValue({ 'keys': tempForm });\r  };\r\r  // 加载表格数据\r  loadPage = (pageNo = 1, pageSize = 20) => {\r    this.setState({\r      pageNo,\r    }, () => {\r      this.props.form.validateFields((err, values) => {\r        if (!err) {\r          const { fields } = this.state;\r          let postData = {};\r          postData.pageNo = pageNo;\r          postData.pageSize = pageSize;\r          postData.tableName = values.fileId;\r          postData.condition = {};\r          fields.forEach(item => {\r            if (values[item] && values[item] !== '') {\r              postData['condition'][item] = values[item];\r            }\r          });\r          this.props.actions.getTableList(postData);\r          // 清空勾选\r          this.setState({\r            selectedRowKeys: [],\r            selectedRows: [],\r          });\r        }\r      });\r    });\r  };\r\r\r  // 翻页\r  handlePageChange = (pageNo, pageSize) => {\r    this.loadPage(pageNo, pageSize);\r  };\r\r  // 切换pageSize\r  handleShowSizeChange = (current, pageSize) => {\r    this.loadPage(1, pageSize);\r  };\r\r  handleSearch = (e) => {\r    e && e.preventDefault();\r    this.loadPage();\r  };\r\r  // 批量更新\r  batchUpdate = () => {\r    const { selectedRows } = this.state;\r    const { getFieldValue } = this.props.form;\r    this.props.actions.batchUpdate({ list: selectedRows, tableName: getFieldValue('fileId') });\r  };\r\r  showSuccess = (msg) => {\r    success({\r      title: 'Success',\r      content: msg,\r      okText: 'Confirm',\r      okType: 'info',\r      onOk: () => {\r        this.loadPage();\r      },\r    });\r  };\r\r  showError = (msg) => {\r    error({\r      title: 'Faild',\r      content: msg,\r      okText: 'Confirm',\r      okType: 'info',\r    });\r  };\r\r  showInfo = (msg) => {\r    info({\r      title: 'Option Tip',\r      content: msg,\r      okText: 'Confirm',\r      okType: 'info',\r    });\r  };\r\r  // 导出\r  exportFile = () => {\r    const { getFieldValue } = this.props.form;\r    const tableName = getFieldValue('fileId');\r    if (tableName && tableName !== '') {\r      // 下载模板文件\r      window.open(`${url.config.export}?tableName=${tableName}`);\r    } else {\r      this.showError('Please select the file!');\r    }\r  };\r  // 查询表头\r  changeSelectGroup = (value) => {\r    if (value && value !== '') {\r      this.props.actions.getColumnList({ tableName: value });\r      this.loadPage();\r    }\r  };\r\r  getFileList = () => {\r    this.props.actions.getFileList();\r  };\r\r  // modal\r  handleShowModal = (params) => {\r    const { modalVar, flag, cb } = params;\r    this.setState({\r      [modalVar]: flag\r    });\r    cb && cb();\r  };\r\r  handleFieldsBlur = ({ key, value }) => {\r    const { setFieldsValue } = this.props.form;\r    setFieldsValue({ [key]: value });\r  };\r\r  handleBlur = ({ key, value, formKey, id }) => {\r    const { setFieldsValue } = this.props.form;\r    setFieldsValue({ [formKey]: value });\r    this.props.actions.editData({ key, value, id });\r  };\r  resetForm = () => {\r    // 清空勾选\r    this.setState({\r      selectedRowKeys: [],\r      selectedRows: [],\r    });\r    this.props.form.resetFields();\r    this.props.actions.clearData();\r  };\r\r  // 删除文件\r  handleDeleteFile = () => {\r    const { getFieldValue } = this.props.form;\r    const tableName = getFieldValue('fileId');\r    Modal.confirm({\r      title: 'Operation',\r      content: 'confirm delete files?',\r      onOk: () => {\r        this.props.actions.tableDelete({ tableName });\r        window.location.reload();\r        this.props.form.resetFields();\r        this.resetForm();\r      },\r      onCancel: () => {\r      },\r    });\r  };\r\r  render() {\r    const that = this;\r    const { getFieldDecorator, getFieldValue } = this.props.form;\r    const fileId = getFieldValue('fileId');\r    const { columnList, tableList: dataSource, fileList, loading, role } = this.props;\r    const { fileLoading, selectedRowKeys } = this.state;\r    const { pageNum, total, pageSize } = this.props.pageInfo;\r    const columnsObj = columnList && columnList.length > 0 ? columnList.filter(item => item.canView === 1).map(item => {\r      return ({\r        title: item.excelCollumName,\r        key: item.tableCollumName,\r        render: (text, record) => {\r          if (item.canEdit === 1) {\r            return (<FormItem label=\"\">\r              {getFieldDecorator(`${item.tableCollumName}_${record.id}`, {\r                initialValue: record[item.tableCollumName],\r                onChange: (e) => this.handleBlur({\r                  id: record.id,\r                  formKey: `${item.tableCollumName}_${record.id}`,\r                  value: e.target.value,\r                  key: item.tableCollumName,\r                })\r              })(\r                <Input placeholder=\"请输入\" style={{ width: '100px' }} />\r              )}\r            </FormItem>)\r          } else {\r            return (<span>{record[item.tableCollumName]}</span>)\r          }\r        }\r      })\r    }) : [];\r\r\r    // 分页数据\r    const pagination = {\r      current: pageNum,\r      total: total,\r      pageSize: pageSize,\r      showSizeChanger: true,\r      showQuickJumper: true,\r      onChange: this.handlePageChange,\r      onShowSizeChange: this.handleShowSizeChange,\r    };\r\r\r    const props = {\r      name: 'file',\r      beforeUpload(file, fileList) {\r      },\r      showUploadList: false,\r      customRequest(info) {\r        // 上传大小限制10M\r        // if (info.file && (info.file.size / 1024 / 1024) > 10) {\r        //   message.error('请上传小于10M的文件！');\r        //   return false;\r        // }\r        // that.setState({\r        //   fileLoading: true\r        // });\r        const formData = new FormData();\r        formData.append('excelFile', info.file);\r        // 调接口\r        that.props.actions.uploadFile(formData);\r      },\r    };\r\r    const rowSelection = {\r      selectedRowKeys,\r      onChange: (selectedRowKeys, selectedRows) => {\r        this.setState({\r          selectedRowKeys,\r          selectedRows\r        });\r      },\r      getCheckboxProps: record => ({\r        disabled: false, // Column configuration not to be checked\r        name: record.name,\r      }),\r    };\r\r    getFieldDecorator('keys', {\r      initialValue: [],\r    });\r    const inputs = getFieldValue('keys').map(item => {\r      return (\r        <Col {...generalLayout}>\r          <FormItem {...formOtherLayout} label={`${item.excelCollumName}`}>\r            {getFieldDecorator(`${item.tableCollumName}`, {\r              initialValue: '',\r              onChange: (e) => this.handleFieldsBlur({\r                id: item.tableCollumName,\r                value: e.target.value,\r              })\r            })(\r              <Input placeholder=\"请输入\" />\r            )}\r          </FormItem>\r        </Col>)\r    });\r\r    return (\r      <div className=\"page-index\">\r        <Spin spinning={fileLoading}>\r          <Content>\r            <Form\r              className=\"ant-advanced-search-form\"\r              onSubmit={this.handleSearch}\r            >\r              <Row gutter={24}>\r                <Col span={14}\r                     style={{ height: 70 }}>\r                  <FormItem labelCol={{ span: 6 }} wrapperCol={{ span: 18 }}\r                            label=\"文件(File)\">\r                    {getFieldDecorator('fileId', {\r                      rules: [{\r                        required: true,\r                        whitespace: true,\r                        message: \"Please select the file\",\r                      }]\r                    })(\r                      <Select\r                        showSearch\r                        optionFilterProp=\"children\"\r                        allowClear\r                        style={{ width: 400 }}\r                        placeholder=\"请选择\"\r                        onSelect={this.changeSelectGroup}>\r                        {\r                          fileList && fileList.length > 0 && fileList.map(item => {\r                            return (<Select.Option title={item.excelName} key={`tableFile_${item.id}`}\r                                                   value={item.tableName}>{item.excelName}</Select.Option>)\r                          })\r                        }\r                      </Select>,\r                    )}\r                  </FormItem>\r                </Col>\r                {\r                  role && role === 'admin' &&\r                  <Fragment>\r                    <Col span={10}\r                         style={{ textAlign: 'left' }}>\r                      {\r                        fileId && fileId !== '' &&\r                        <Button type=\"default\" style={{ marginRight: '15px', marginLeft: '-25px' }} onClick={this.handleDeleteFile}>删除文件(Delete File)</Button>\r                      }\r                      <Upload {...props}>\r                        <Button type=\"primary\">上传文件(Upload File)</Button>\r                      </Upload>\r                      <Button\r                        style={{ marginLeft: '10px' }}\r                        type=\"default\"\r                        onClick={this.exportFile}>导出(Export File)</Button>\r                    </Col>\r                    <Col style={{ clear: 'both' }} />\r                  </Fragment>\r                }\r\r              </Row>\r              <Row gutter={24}>\r                {\r                  inputs\r                }\r              </Row>\r              <Row gutter={24}>\r                <Col {...generalLayout} style={{ marginLeft: '100px', marginBottom: '15px' }}>\r                  <Button type=\"primary\" htmlType=\"submit\">查询(Search)</Button>&nbsp;&nbsp;&nbsp;&nbsp;\r                  <Button type=\"default\" onClick={this.resetForm}>重置(Reset)</Button>\r                </Col>\r              </Row>\r            </Form>\r            <h3 style={{ margin: '0 0 5px', paddingTop: '25px', borderTop: '1px solid #ddd' }}></h3>\r            <Row gutter={24} style={{ marginBottom: '10px' }}>\r              <Col style={{ textAlign: 'left' }}\r                   span={12}>\r                <Button type=\"primary\" onClick={this.batchUpdate} disabled={!selectedRowKeys.length > 0}>批量更新(Batch Update)</Button>\r                &nbsp;&nbsp;&nbsp;&nbsp;\r                {\r                  role === 'admin' && <Link to={'/edit'}>跳转编辑表头(Jump Edit Column)</Link>\r                }\r              </Col>\r              <Col style={{ textAlign: 'right' }}\r                   span={12}>\r                <div className=\"search-count\">\r                  共 {pagination.total} 条\r                </div>\r              </Col>\r            </Row>\r            <Spin spinning={loading}>\r              <Table scroll={{ x: 'max-content' }}\r                     rowKey=\"id\"\r                     className=\"table-list\"\r                     rowSelection={rowSelection}\r                     dataSource={dataSource}\r                     columns={columnsObj}\r                     pagination={pagination} />\r            </Spin>\r          </Content>\r        </Spin>\r\r      </div>\r    );\r  }\r}\r\rconst FinalIndex = Form.create()(\r  Index,\r);\r\rconst mapStateToProps = (state) => {\r  const {\r    resultList,\r    operateSuccessFlag,\r    operateFailFlag,\r    operateInfo,\r    tableList,\r    fileList,\r    refreshFileFlag,\r    columnList,\r    pageInfo,\r    loading,\r  } = state.resumeReducer;\r  return {\r    resultList,\r    operateSuccessFlag,\r    operateFailFlag,\r    operateInfo,\r    tableList,\r    fileList,\r    refreshFileFlag,\r    columnList,\r    pageInfo,\r    loading,\r  }\r};\r\rconst mapDispatchToProps = dispatch => {\r  return {\r    actions: bindActionCreators(actions, dispatch)\r  }\r};\r\rexport default connect(\r  mapStateToProps,\r  mapDispatchToProps\r)(RoleHOC(FinalIndex));\r","import React, { PureComponent } from 'react';\rimport hoistNonReactStatics from 'hoist-non-react-statics';\r\rexport default (WrapComponent) => {\r  class RoleComponent extends PureComponent {\r    constructor(props) {\r      super(props);\r      this.state = {\r        role: props.route.path === '/admin' ? 'admin' : 'employee'\r      }\r    }\r\r    componentWillReceiveProps(nextProps) {\r      if (this.props.route.path !== nextProps.route.path && nextProps.route.path !== '') {\r        const routing = nextProps.route.path;\r        if (routing === '/admin') {\r          this.setState({\r            role: 'admin'\r          });\r        } else {\r          this.setState({\r            role: 'employee'\r          });\r        }\r      }\r    }\r\r    render() {\r      const { role } = this.state;\r      return (\r        <WrapComponent role={role} {...this.props} />\r      )\r    }\r  }\r\r  return hoistNonReactStatics(RoleComponent, WrapComponent);\r};\r"],"sourceRoot":""}